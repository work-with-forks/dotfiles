# To make this work, uncomment the line below and replace myprojectdir with your desired search directory
# export SEARCH_DIR=myprojectdir

echorun () {
  echo "$@\n"; eval "$@"
}

fpcp () {
  local file_path="$(pwd)/$1"
  echo $file_path | tee >(xclip -sel clip)
}

fx() {
  file=$(find "$SEARCH_DIR" -type f -wholename \*$1\* -not -path './.*/*' | peco)
  echo "Enter a command..."; read command
  eval "$command $file"
}

fyr() {
  # file=$(find "$SEARCH_DIR" -type f -wholename \*$1\* -not -path '*/.*/*' -not -path "*/mason*/*" | fzy)
  file=$(fd . "$SEARCH_DIR" | fzy)
  cd "$(dirname "${file}")"
}

zv() {
 file=$(find "$SEARCH_DIR" -type f -wholename \*"$1"\* -not -path '*/.*/*' -not -path "*/mason*/*" | fzy)
 vim "${file}"
}

dism() {
  func=$(arm-none-eabi-objdump -t "$1" | cut -f2 | cut -d ' ' -f2 | fzy)
  arm-none-eabi-gdb "$1" -batch -ex "disas /m $func" | less
}

dwget() {
  rm -rf "$(basename "$1")" && wget "$1"
}

gsa() {
  stashnum="${1:-0}"
  cmd="git stash apply stash@{$stashnum}"
  printf "$cmd\n\n"; eval "$cmd"
}

gsp() {
  stashnum="${1:-0}"
  cmd="git stash show -p stash@{$stashnum}"
  printf "$cmd\n\n"; eval "$cmd"
}

gla() {
  if [ "$#" -eq 0 ]; then
    cmd="git log --author=$(whoami)"
  elif echo "$1" | grep -q "^-"; then
    cmd="git log --author=$(whoami) $@"
  else
    cmd="git log --author=$@"
  fi
  printf "$cmd\n\n"; eval "$cmd"
}

glSa() {
  cmd="git log -S $1 --stat --author=${2:-$(whoami)}"
  printf "$cmd\n\n"; eval "$cmd"
}

git-retag() {
  cmd="git tag -d $1 && git push origin $1 --delete && git tag $1 && git push origin $1"
  echo -n "Exec '$cmd' [y/n]? "
  read reply
  echo
  if [ "$reply" != "${reply#[Yy]}" ]; then
    eval "$cmd"
  fi
}

gshf() {
  if [ "$#" -eq 2 ]; then
    cd "$(git rev-parse --show-toplevel)"
    local file=$(git ls-tree -r "$1" --name-only | rg "$2" | rg '\.c$|\.h$|\.cpp$|\.hpp$|\.py' | fzy)
    local cmd="git show $1:./${file}"
    echo "$cmd" && eval "$cmd"
  else
    echo "Usage: gshf <hash> <filename>"
  fi
}

gcfu() {
  if [ "$#" -eq 2 ]; then
    cmd1="git config --local user.name \"$1\""
    cmd2="git config --local user.email \"$2\""
    echo -n "Exec \n$cmd1\n$cmd2 [y/n]? "
    read reply
    if [ $reply != "${reply#[Yy]}" ]; then
      eval "$cmd1"
      eval "$cmd2"
      printf "\ngit config --local [user] is now:"
      git config --local --get-regexp user
    fi
  else
    echo "Usage: gcfu <username> <email>"
  fi
}

gDb() {
  local lcmd="git branch -D $(git rev-parse --abbrev-ref HEAD)"
  local rcmd="git push origin $(git rev-parse --abbrev-ref HEAD) --delete"
  if [[ "$#" -gt 1 ]]; then
     echo "Usage: gDb (r|l|lr|rl)"
  fi
  case "${1:-r}" in
      l) echo "$lcmd" && eval "$lcmd" ;;
      r) echo "$rcmd" && eval "$rcmd" ;;
      lr|rl)
         echo "$lcmd\n$rcmd" && eval "$lcmd" && eval "$rcmd" ;;
  esac
}

gdmergedb(){
  # TODO: if no args, print usage
  # 1st option: --merged or -r or nothing
  # 2nd option: local|remote|both (default to local)
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  for branch in $(git branch --merged | cut -c3-)
  do
    echo "Branch $branch is already merged into $current_branch."
    echo "Would you like to delete it? [Y]es/[N]o "
    read REPLY
    if [[ $REPLY =~ ^[Yy] ]]; then
      git branch -d $branch
    fi
  done
}

gdlocalb(){
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  for branch in $(git branch | cut -c3-)
  do
  echo "Would you like to delete $branch? [Y]es/[N]o "
  read REPLY
  if [[ $REPLY =~ ^[Yy] ]]; then
    git branch -D $branch
  fi
  done
}

gspr() {
  if ! git diff-index --quiet HEAD --; then
    echo "git stash save; git pull --rebase; git stash pop"
    git stash save; git pull --rebase; git stash pop
  else
    echo "git pull --rebase"
    git pull --rebase
  fi
}

grrauth() {
  if [ "$#" -gt 0 ]; then
    export OLD_EMAIL="${1:-$(git config user.email)}"
    export CORRECT_EMAIL="${2:-$(git config user.email)}"
    export CORRECT_NAME="${3:-$(git config user.name)}"
    echo "Set commits with email \"$OLD_EMAIL\" to author/committer:"
    echo "\"$CORRECT_NAME <$CORRECT_EMAIL>\"? [Y]es/[N]o"
    read REPLY
    if [[ $REPLY =~ ^[Yy] ]]; then
      git filter-branch -f --env-filter \
      'if [ "$GIT_COMMITTER_EMAIL" = "${OLD_EMAIL}" ]
      then
          export GIT_COMMITTER_NAME="${CORRECT_NAME}"
          export GIT_COMMITTER_EMAIL="${CORRECT_EMAIL}"
      fi
      if [ "$GIT_AUTHOR_EMAIL" = "${OLD_EMAIL}" ]
      then
          export GIT_AUTHOR_NAME="${CORRECT_NAME}"
          export GIT_AUTHOR_EMAIL="${CORRECT_EMAIL}"
      fi' --tag-name-filter cat -- --branches --tags
    fi
  else
    echo "Usage: grrauth <old email>"
    echo "       grrauth <old email> <new email> <new name>"
  fi
}

gcrz() {
  local branch="$(git branch -r | fzy)"
  # Remove "origin/" and whitespace
  branch="${branch/origin\//}"
  branch="${branch/bare\//}"
  branch="${branch//[[:space:]]/}"
  cmd="git checkout $branch"
  echo "$cmd" && eval "$cmd"
}

gFix() {
  echorun "git commit --fixup=$1"
  echorun "git rebase -i --autosquash --no-edit $1~"
}
