# To make this work, uncomment the line below and replace myprojectdir with your desired search directory
# export SEARCH_DIR=myprojectdir
fx() {
  file=$(find $SEARCH_DIR -type f -wholename \*$1\* -not -path './.*/*' | peco)
  echo "Enter a command..."; read command
  eval $command $file
}

fyr() {
  file=$(find $SEARCH_DIR -type f -wholename \*$1\* -not -path '*/.*/*' -not -path "*/mason*/*" | fzy)
  cd $(dirname "${file}")
}

zv() {
 file=$(find $SEARCH_DIR -type f -wholename \*$1\* -not -path '*/.*/*' -not -path "*/mason*/*" | fzy)
 vim "${file}"
}

dism() {
  func=$(arm-none-eabi-objdump -t $1 | cut -f2 | cut -d ' ' -f2 | fzy)
  arm-none-eabi-gdb $1 -batch -ex "disas /m $func" | less
}

dwget() {
  rm -rf $(basename "$1") && wget $1
}

gsa() {
  stashnum="${1:-0}"
  cmd="git stash apply stash@{$stashnum}"
  printf "$cmd\n\n"; eval $cmd
}

gsp() {
  stashnum="${1:-0}"
  cmd="git stash show -p stash@{$stashnum}"
  printf "$cmd\n\n"; eval $cmd
}

gla() {
  cmd="git log --author=${1:-$(whoami)}"
  printf "$cmd\n\n"; eval $cmd
}

glSa() {
  cmd="git log -S $1 --stat --author=${2:-$(whoami)}"
  printf "$cmd\n\n"; eval $cmd
}

git-retag() {
  cmd="git tag -d $1 && git push origin $1 --delete && git tag $1 && git push origin $1"
  echo -n "Exec '$cmd' [y/n]? "
  read reply
  echo
  if [ $reply != "${reply#[Yy]}" ]; then
    eval $cmd
  fi
}

gcfu() {
  if [ "$#" -eq 2 ]; then
    cmd1="git config --local user.name \"$1\""
    cmd2="git config --local user.email \"$2\""
    echo -n "Exec \n$cmd1\n$cmd2 [y/n]? "
    read reply
    if [ $reply != "${reply#[Yy]}" ]; then
      eval $cmd1
      eval $cmd2
      echo "\ngit config --local [user] is now:"
      git config --local --get-regexp user
    fi
  else
    echo "Wrong number of args"
  fi
}

gDb() {
  local lcmd="git branch -D $(git rev-parse --abbrev-ref HEAD)"
  local rcmd="git push origin $(git rev-parse --abbrev-ref HEAD) --delete"
  if [[ "$#" -gt 1 ]]; then
     echo "Usage: gDb (r|l|lr|rl)"
  fi
  case "${1:-r}" in
      l) echo "$lcmd" && eval "$lcmd" ;;
      r) echo "$rcmd" && eval "$rcmd" ;;
      lr|rl)
         echo "$lcmd\n$rcmd" && eval "$lcmd" && eval "$rcmd" ;;
  esac
}

}